#!/bin/bash
set -x

job_id=$CI_JOB_ID
pipeline_id=$CI_PIPELINE_ID
commit_id=$CI_COMMIT_SHA

source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

echo "Setting up test dependencies.."	
${utils_path}/setup_dependencies litmus-test

bash script/utils/pooling jobname:pool-delete
bash script/utils/e2e-cr jobname:pool-kill jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id"

################
# LitmusBook 1 #
################

echo "*******Deploying Busybox Application****"

test_name=$(bash script/utils/generate_test_name testcase=busybox-provision-pool-kill metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."

cp apps/busybox/deployers/run_litmus_test.yml busybox_pool_kill.yml

sed -i -e 's/app: busybox-litmus/app: deploy-busybox-pool-kill/g' \
-e 's/app=busybox-sts/app=pool-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/value: openebs-busybox/value: openebs-bb-poolkill/g' \
-e 's/value: app-busybox-ns/value: pool-kill/g' busybox_pool_kill.yml
cat busybox_pool_kill.yml

bash ../script/utils/litmus_job_runner label='app:deploy-busybox-pool-kill' job=busybox_pool_kill.yml
cd ..
bash script/utils/dump_cluster_state;
bash script/utils/event_updater jobname:pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

if [ "$?" != "0" ]; then
# python3 script/utils/result/result_update.py $job_id KBM1 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 2 #
################

run_id="pool-kill";test_name=$(bash script/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_pool_kill.yml

# Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | pool-kill                                        | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-pool-kill             |
 | appLabel          | env    | app=busybox-sts                     | app=pool-kill                                    | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: pool-kill/g' \
-e 's/app=busybox-sts/app=pool-kill/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-pool-kill/g' busybox_loadgen_pool_kill.yml

cat busybox_loadgen_pool_kill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_pool_kill.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../script/utils/litmus_job_runner label='liveness:busybox-liveness-pool-kill' job=busybox_loadgen_pool_kill.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash script/utils/dump_cluster_state;
# Update the e2e event for the job.
bash script/utils/event_updater jobname:pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

if [ "$?" != "0" ]; then
# python3 script/utils/result/result_update.py $job_id KBM1 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 3 #
################

echo "*******Performing cStor Pool kill**********"

run_id="kill";test_name=$(bash script/utils/generate_test_name testcase=openebs-pool-failure metadata=${run_id})
echo $test_name

cd litmus
cp experiments/chaos/openebs_pool_failure/run_litmus_test.yml poolkill.yml

sed -i -e 's/value: percona-mysql-claim/value: openebs-bb-poolkill/g' \
-e 's/value: '\''name=percona'\''/value: '\''app=pool-kill'\''/g' \
-e 's/enable//g' \
-e 's/value: app-percona-ns/value: pool-kill/g' poolkill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' poolkill.yml

echo "Running the litmus test for Busybox Deployment application pod kill.."
cat poolkill.yml

bash ../script/utils/litmus_job_runner label='name:openebs-pool-failure' job=poolkill.yml
cd ..
bash script/utils/dump_cluster_state;
bash script/utils/event_updater jobname:pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

if [ "$?" != "0" ]; then
# python3 script/utils/result/result_update.py $job_id KBM1 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 4 #
################

run_id="deprovision-pool-kill";test_name=$(bash script/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_deprovision_pool_kill.yml

# Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | pool-kill                                        | 
 | appLabel          | env    | app=busybox-sts                     | app=pool-kill                                    |
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-deprovision-pool-kill |
 | action            | env    | provision                           | deprovision                                      | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: pool-kill/g' \
-e 's/app=busybox-sts/app=pool-kill/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/generateName: litmus-busybox-liveness/generateName: busybox-liveness-dep-pool-kill/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-deprovision-pool-kill/g' busybox_loadgen_deprovision_pool_kill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_deprovision_pool_kill.yml

cat busybox_loadgen_deprovision_pool_kill.yml
# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../script/utils/litmus_job_runner label='liveness:busybox-liveness-deprovision-pool-kill' job=busybox_loadgen_deprovision_pool_kill.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash script/utils/dump_cluster_state;
bash script/utils/event_updater jobname:pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

rc_val=$(echo $?)

# Update result of the test case in github mayadata-io/e2e-packet repository.
if [ "$rc_val" != "0" ]; then
# python3 script/utils/result/result_update.py $job_id KBM1 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 5 #
################

echo "********Deprovisioning Busybox Application*******"

test_name=$(bash script/utils/generate_test_name testcase=busybox-deprovision-pool-kill metadata="")
echo $test_name

cd litmus
cp apps/busybox/deployers/run_litmus_test.yml deprovision_pool_kill.yml

sed -i -e 's/generateName: litmus-busybox-deploy/generateName: busybox-deprovision-pool-kill/g' \
-e 's/app: busybox-litmus/app: busybox-deprovision-pool-kill/g' \
-e 's/app=busybox-sts/app=pool-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/value: openebs-busybox/value: openebs-bb-poolkill/g' \
-e 's/value: app-busybox-ns/value: pool-kill/g' \
-e 's/value: provision/value: deprovision/g' deprovision_pool_kill.yml

echo "Running the litmus test for Busybox Deployment.."
cat deprovision_pool_kill.yml

bash ../script/utils/litmus_job_runner label='app:busybox-deprovision-pool-kill' job=deprovision_pool_kill.yml
cd ..
bash script/utils/dump_cluster_state;
bash script/utils/event_updater jobname:pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

rc_val=$(echo $?)

# testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

if [ "$rc_val" != "0" ]; then
# python3 script/utils/result/result_update.py $job_id KBM1 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

current_time=$(eval $time)
bash script/utils/e2e-cr jobname:pool-kill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" test_result:Pass
# python3 script/utils/result/result_update.py $job_id KBM1 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi
