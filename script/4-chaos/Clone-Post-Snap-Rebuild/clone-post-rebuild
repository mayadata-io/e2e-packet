#!/bin/bash
set -x

job_id=$CI_JOB_ID
pipeline_id=$CI_PIPELINE_ID
commit_id=$CI_COMMIT_SHA

source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

echo "Setting up test dependencies.."	
${utils_path}/setup_dependencies litmus-test

#bash script/utils/e2e-cr jobname:clone-post-snap-rebuild jobphase:Waiting
bash script/utils/pooling jobname:snap-rebuild-multiple-rep
bash script/utils/e2e-cr jobname:clone-post-snap-rebuild jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id"
#bash script/utils/e2e-cr jobname:clone-during-snap-rebuild jobphase:Waiting
#bash script/utils/e2e-cr jobname:clone-pre-snap-rebuild jobphase:Waiting

################
# LitmusBook 1 #
################

echo "*******Deploying Busybox Application****"

test_name=$(bash script/utils/generate_test_name testcase=busybox-provision-post-rebuild metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."

cp apps/busybox/deployers/run_litmus_test.yml busybox_post_rebuild.yml

sed -i -e 's/app: busybox-litmus/app: deploy-busybox-post-rebuild/g' \
-e 's/app=busybox-sts/app=post-rebuild/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-busybox/value: busybox-post-rebuild/g' \
-e 's/value: app-busybox-ns/value: post-rebuild/g' busybox_post_rebuild.yml
cat busybox_post_rebuild.yml

bash ../script/utils/litmus_job_runner label='app:deploy-busybox-post-rebuild' job=busybox_post_rebuild.yml
cd ..
bash script/utils/dump_cluster_state;
bash script/utils/event_updater jobname:clone-post-snap-rebuild $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

if [ "$?" != "0" ]; then
# python3 script/utils/result/result_update.py $job_id $case_id 4-chaos "Check if the clone can be created after snapshot rebuilt successfully" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 2 #
################

run_id="post-rebuild";test_name=$(bash script/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_post_rebuild.yml

# Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | post-rebuild                                     | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-post-rebuild          |
 | appLabel          | env    | app=busybox-sts                     | app=post-rebuild                                 | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: post-rebuild/g' \
-e 's/app=busybox-sts/app=post-rebuild/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-post-rebuild/g' busybox_loadgen_post_rebuild.yml

cat busybox_loadgen_post_rebuild.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_post_rebuild.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../script/utils/litmus_job_runner label='liveness:busybox-liveness-post-rebuild' job=busybox_loadgen_post_rebuild.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash script/utils/dump_cluster_state;
# Update the e2e event for the job.
bash script/utils/event_updater jobname:clone-post-snap-rebuild $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

if [ "$?" != "0" ]; then
# python3 script/utils/result/result_update.py $job_id $case_id 4-chaos "Check if the clone can be created after snapshot rebuilt successfully" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 3 #
################

test_name=$(bash script/utils/generate_test_name testcase=k8s-snapshot-rebuild-clone metadata="")
echo $test_name

cd litmus
cp experiments/functional/clone-snapshot-rebuild/run_litmus_test.yml run_post_rebuild.yml

sed -i -e 's/app=busybox-sts/app=post-rebuild/g' \
-e 's/value: openebs-busybox/value: busybox-post-rebuild/g' \
-e 's/value: app-busybox-ns/value: post-rebuild/g' run_post_rebuild.yml

cat run_post_rebuild.yml

bash ../script/utils/litmus_job_runner label='app:k8s-snap-rebuild-clone' job=run_post_rebuild.yml
cd ..
bash script/utils/dump_cluster_state;
bash script/utils/event_updater jobname:clone-post-snap-rebuild $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

rc_val=$(echo $?)

if [ "$rc_val" != "0" ]; then
# python3 script/utils/result/result_update.py $job_id $case_id 4-chaos "Check if the clone can be created after snapshot rebuilt successfully" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

current_time=$(eval $time)

# Update the e2e cr once the job is completed
bash script/utils/e2e-cr jobname:clone-post-snap-rebuild jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" test_result:$testResult

# python3 script/utils/result/result_update.py $job_id $case_id 4-chaos "Check if the clone can be created after snapshot rebuilt successfully" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi
