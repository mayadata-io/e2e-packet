#!/bin/bash
set -x

job_id=$CI_JOB_ID
pipeline_id=$CI_PIPELINE_ID
commit_id=$CI_COMMIT_SHA

source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

echo "Setting up test dependencies.."	
${utils_path}/setup_dependencies litmus-test

bash script/utils/pooling jobname:clone-different-capacity
bash script/utils/e2e-cr jobname:clone-parent-volume-delete jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" 

echo "*******Taking clone of BusyBox snapshot application**********"

test_name=$(bash script/utils/generate_test_name testcase=delete-parent-volume metadata="")
echo $test_name

cd litmus
cp experiments/functional/restrict-parent-volume-deletion/run_litmus_test.yml run_parent_vol_test.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appPVC            | env    | openebs-busybox                     | busybox-snapshot                                 |
 | appNamespace      | env    | app-busybox-ns                      | busybox-snap                                     | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: openebs-busybox/value: busybox-snapshot/g' \
-e 's/value: app-busybox-ns/value: busybox-snap/g' run_parent_vol_test.yml

echo "Running the litmus test for Busybox Deployment Clone.."
cat run_parent_vol_test.yml

bash ../script/utils/litmus_job_runner label='app:litmus-delete-parent-volume' job=run_parent_vol_test.yml
cd ..
bash script/utils/dump_cluster_state;
bash script/utils/event_updater jobname:clone-parent-volume-delete $test_name jobid:"$job_id" pipelineid:"$pipeline_id" 
rc_val=$(echo $?)

# Obtain the status of the test using litmusresult(lr) 
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

if [ "$rc_val" != "0" ]; then
# python3 script/utils/result/result_update.py $job_id 5O5V 3-functional "Check if the clone can be created using volume snapshot" $testResult $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

current_time=$(eval $time)
bash script/utils/e2e-cr jobname:clone-parent-volume-delete jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" test_result:Pass

# python3 script/utils/result/result_update.py $job_id 5O5V 3-functional "Check if the clone can be created using volume snapshot" $testResult $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi